USE SCHEMA SNOWFLAKE_DB.RAWHIST;

-- Integration SNOWFLAKE_S3_INTEGRATION successfully created.
CREATE OR REPLACE STORAGE INTEGRATION SNOWFLAKE_S3_INTEGRATION 
    TYPE = EXTERNAL_STAGE
    STORAGE_PROVIDER = 'S3'
    ENABLED = TRUE
    STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::7673769235:role/mySnowRule'
    STORAGE_ALLOWED_LOCATIONS = ('s3://customerda/data/');

DESC INTEGRATION SNOWFLAKE_S3_INTEGRATION;


CREATE OR REPLACE FILE FORMAT MY_CSV_FORMAT
  TYPE = CSV
  FIELD_DELIMITER = ','
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'
  SKIP_HEADER = 1
  NULL_IF = ('NULL', 'null')
  EMPTY_FIELD_AS_NULL = true;
 ------ 

GRANT CREATE STAGE ON SCHEMA RAWHIST_DB TO ROLE ACCOUNTADMIN;


CREATE STAGE SOURCE_DATA_CUSTOMER_STAGE
  STORAGE_INTEGRATION = SNOWFLAKE_S3_INTEGRATION
  URL = 's3://customerdat01/data/'
  FILE_FORMAT = MY_CSV_FORMAT;


CREATE NOTIFICATION INTEGRATION SNOWFLAKE_ERROR_INTEGRATION
  ENABLED = true
  TYPE = QUEUE
  NOTIFICATION_PROVIDER = AWS_SNS
  DIRECTION = OUTBOUND
  AWS_SNS_TOPIC_ARN = 'arn:aws:sns:us-east-2:7673975:SF-S3-Error-Notifications'
  AWS_SNS_ROLE_ARN = 'arn:aws:iam::767397635:role/sf_error_notification_role';


DESC INTEGRATION SNOWFLAKE_S3_INTEGRATION;

-- TARGET :CUSTOMER_RAWHIST
CREATE OR REPLACE TABLE CUSTOMER_RAWHIST
    (
        FIRST_NAME VARCHAR(50) NOT NULL COLLATE 'en-ci',
        LAST_NAME VARCHAR(50) NOT NULL COLLATE 'en-ci',        
        COMPANYNAME VARCHAR(200) COLLATE 'en-ci', 
        PHONE VARCHAR(200) COLLATE 'en-ci',
        ADDRESSLINE1 VARCHAR(200) NOT NULL COLLATE 'en-ci',
        ADDRESSLINE2 VARCHAR(200) COLLATE 'en-ci',
        CITY VARCHAR(100) COLLATE 'en-ci',
        STATE VARCHAR(50) NOT NULL COLLATE 'en-ci',
        COUNTRY VARCHAR(20) NOT NULL COLLATE 'en-ci',
        POSTALCODE VARCHAR(50) COLLATE 'en-ci',
        PROVINCE VARCHAR(20) COLLATE 'en-ci', 
        ---- SNOWFLAKE METADATA COLUMNS ----
        TIME_ZONE VARCHAR(3) NOT NULL COLLATE 'en-ci', 
        SOURCE_SYS_NAME VARCHAR(20) NOT NULL COLLATE 'en-ci', 
        INSTNC_ST_NM VARCHAR(50) NOT NULL COLLATE 'en-ci',
        PROCESS_ID VARCHAR(100) NOT NULL COLLATE 'en-ci',
        PROCESS_NAME VARCHAR(200) NOT NULL COLLATE 'en-ci',
        INSERT_DTS TIMESTAMP_NTZ(6) NOT NULL,
        UPDATE_DTS TIMESTAMP_NTZ(6) NOT NULL,
        MD5_HASH VARCHAR(80) NOT NULL COLLATE 'en-ci',
        PRIMARY KEY (FIRST_NAME,LAST_NAME,MD5_HASH));

        
CREATE OR REPLACE TABLE WORK_CUSTOMER_TRANSFORM
    (
        FIRST_NAME VARCHAR(50) NOT NULL COLLATE 'en-ci',
        LAST_NAME VARCHAR(50) NOT NULL COLLATE 'en-ci',     
        COMPANYNAME VARCHAR(200) COLLATE 'en-ci',       
        PHONE VARCHAR(200) COLLATE 'en-ci',       
        ADDRESSLINE1 VARCHAR(200) NOT NULL COLLATE 'en-ci',       
        ADDRESSLINE2 VARCHAR(200) COLLATE 'en-ci',      
        CITY VARCHAR(100) COLLATE 'en-ci',       
        STATE VARCHAR(50) NOT NULL COLLATE 'en-ci',       
        COUNTRY VARCHAR(20) NOT NULL COLLATE 'en-ci',       
        POSTALCODE VARCHAR(50) COLLATE 'en-ci',      
        PROVINCE VARCHAR(20) COLLATE 'en-ci',
        
        ---- SNOWFLAKE METADATA COLUMNS ----       
        TIME_ZONE VARCHAR(3) NOT NULL COLLATE 'en-ci',      
        SOURCE_SYS_NAME VARCHAR(20) NOT NULL COLLATE 'en-ci',      
        INSTNC_ST_NM VARCHAR(50) NOT NULL COLLATE 'en-ci',       
        PROCESS_ID VARCHAR(100) NOT NULL COLLATE 'en-ci',        
        PROCESS_NAME VARCHAR(200) NOT NULL COLLATE 'en-ci',       
        INSERT_DTS TIMESTAMP_NTZ(6) NOT NULL,       
        UPDATE_DTS TIMESTAMP_NTZ(6) NOT NULL,       
        MD5_HASH VARCHAR(80) NOT NULL COLLATE 'en-ci',      
        PRIMARY KEY (FIRST_NAME,LAST_NAME,MD5_HASH));


CREATE OR REPLACE TABLE SNOWFLAKE_DB.rawhist_db.WORK_CUSTOMER_TRANSFORM_COPY
    (
        FIRST_NAME VARCHAR(50) COLLATE 'en-ci',      
        LAST_NAME VARCHAR(50) COLLATE 'en-ci',     
        COMPANYNAME VARCHAR(200) COLLATE 'en-ci',      
        PHONE VARCHAR(200) COLLATE 'en-ci',      
        ADDRESSLINE1 VARCHAR(200) COLLATE 'en-ci',       
        ADDRESSLINE2 VARCHAR(200) COLLATE 'en-ci',        
        CITY VARCHAR(100) COLLATE 'en-ci',        
        STATE VARCHAR(50) COLLATE 'en-ci',       
        COUNTRY VARCHAR(20) COLLATE 'en-ci',       
        POSTALCODE VARCHAR(50) COLLATE 'en-ci',       
        PROVINCE VARCHAR(20) COLLATE 'en-ci'
        );


-- SELECT *FROM SNOWFLAKE_DB.RAWHIST_DB.SOURCE_DATA_CUSTOMER_STAGE

CREATE OR REPLACE PIPE 
    SNOWFLAKE_DB.RAWHIST_DB.WORK_RAWHIST_CUSTOMER_SRC_TO_RH_PIPE
AUTO_INGEST =TRUE 
ERROR_INTEGRATION = SNOWFLAKE_ERROR_INTEGRATION
COMMENT = "INGEST DATA FILES FROM SNOWFLAKE EXTERNAL STAGE LOCATION*"
AS
    COPY INTO 
        SNOWFLAKE_DB.RAWHIST_DB.WORK_CUSTOMER_TRANSFORM_COPY
    FROM 
        @SNOWFLAKE_DB.RAWHIST_DB.SOURCE_DATA_CUSTOMER_STAGE/
FILE_FORMAT = (FORMAT_NAME = MY_CSV_FORMAT);



CREATE OR REPLACE STREAM SNOWFLAKE_DB.RAWHIST_DB.WORK_RAWHIST_CUSTOMER_SRC_TO_RH_STREAM
ON
TABLE SNOWFLAKE_DB.RAWHIST_DB.WORK_CUSTOMER_TRANSFORM_COPY
APPEND_ONLY = TRUE;

-- STORED PROCEDURE

CREATE PROCEDURE IF NOT EXISTS SNOWFLAKE_DB.RAWHIST_DB.WORK_CUSTOMER_SRC_TO_SL_SP(
    DATABASE VARCHAR(50))
    RETURNS VARCHAR(50)
    LANGUAGE JAVASCRIPT
    EXECUTE AS CALLER
    AS
    $$
    try {
    //Create statement BEGIN, Begins a transaction in the current session
    snowflake.execute({sqlText:`BEGIN TRANSACTION;`});
    //load data from Snow Stream to Customer XFM in SILVER Layer
    snowflake.execute({sqlText:`
    
    CREATE OR REPLACE TABLE 
        ${DATABASE}.RAWHIST_DB.WORK_CUSTOMER_TRANSFORM
    (
        FIRST_NAME VARCHAR(50) NOT NULL COLLATE 'en-ci',
        LAST_NAME VARCHAR(50) NOT NULL COLLATE 'en-ci',        
        COMPANYNAME VARCHAR(200) COLLATE 'en-ci', 
        PHONE VARCHAR(200) COLLATE 'en-ci',
        ADDRESSLINE1 VARCHAR(200) NOT NULL COLLATE 'en-ci',
        ADDRESSLINE2 VARCHAR(200) COLLATE 'en-ci',
        CITY VARCHAR(100) COLLATE 'en-ci',
        STATE VARCHAR(50) NOT NULL COLLATE 'en-ci',
        COUNTRY VARCHAR(20) NOT NULL COLLATE 'en-ci',
        POSTALCODE VARCHAR(50) COLLATE 'en-ci',
        PROVINCE VARCHAR(20) COLLATE 'en-ci', 
        ---- SNOWFLAKE METADATA COLUMNS ----
        TIME_ZONE VARCHAR(3) NOT NULL COLLATE 'en-ci', 
        SOURCE_SYS_NAME VARCHAR(20) NOT NULL COLLATE 'en-ci', 
        INSTNC_ST_NM VARCHAR(50) NOT NULL COLLATE 'en-ci',
        PROCESS_ID VARCHAR(100) NOT NULL COLLATE 'en-ci',
        PROCESS_NAME VARCHAR(200) NOT NULL COLLATE 'en-ci',
        INSERT_DTS TIMESTAMP_NTZ(6) NOT NULL,
        UPDATE_DTS TIMESTAMP_NTZ(6) NOT NULL,
        MD5_HASH VARCHAR(80) NOT NULL COLLATE 'en-ci',
        PRIMARY KEY (FIRST_NAME,LAST_NAME,MD5_HASH));
    
    INSERT INTO
        ${DATABASE}.RAWHIST_DB.WORK_CUSTOMER_TRANSFORM
    (
        FIRST_NAME,
        LAST_NAME,   
        COMPANYNAME, 
        PHONE,  
        ADDRESSLINE1,    
        ADDRESSLINE2, 
        CITY,  
        STATE, 
        COUNTRY,  
        POSTALCODE, 
        PROVINCE,  
        ---- snowflake metadata columns ----
        TIME_ZONE, 
        SOURCE_SYS_NAME,
        INSTNC_ST_NM,
        PROCESS_ID,
        PROCESS_NAME,
        INSERT_DTS,
        UPDATE_DTS, 
        MD5_HASH
    )
    SELECT  
        FIRST_NAME,
        LAST_NAME,
        COMPANYNAME,
        PHONE,
        ADDRESSLINE1,
        ADDRESSLINE2,
        CITY,
        STATE,
        COUNTRY,
        POSTALCODE,
        PROVINCE,
        ---- snowflake metadata columns ----
        'EST' AS TIME_ZONE,     
        'CUSTOMER' AS SOURCE_SYS_NAME,
        'STANDARD' AS INSTNC_ST_NM,
        CURRENT_SESSION() AS PROCESS_ID,
        'SNOWFLAKE_DB.RAWHIST_DB.WORK_CUSTOMER_SRC_TO_SL_SP' AS PROCESS_NAME,
        CURRENT_TIMESTAMP(6) AS INSERT_DTS,   
        CURRENT_TIMESTAMP(6) AS UPDATE_DTS,
        MD5(
            COALESCE(TO_VARCHAR(TRIM(COMPANYNAME)),'') ||
            COALESCE(TO_VARCHAR(TRIM(PHONE)),'')||
            COALESCE(TO_VARCHAR(TRIM(ADDRESSLINE1)),'')|| 
            COALESCE(TO_VARCHAR(TRIM(ADDRESSLINE2)),'')||
            COALESCE(TO_VARCHAR(TRIM(CITY)),'')||
            COALESCE(TO_VARCHAR(TRIM(STATE)),'')||
            COALESCE(TO_VARCHAR(TRIM(COUNTRY)),'')|| 
            COALESCE(TO_VARCHAR(TRIM(POSTALCODE)),'')||
            COALESCE(TO_VARCHAR(TRIM(PROVINCE)),'') ||
        ) AS MD5_HASH

    FROM
        ${DATABASE}.RAWHIST_DB.WORK_RAWHIST_CUSTOMER_SRC_TO_RH_STREAM

    WHERE
        FIRST_NAME is NOT NULL
    AND
        LAST_NAME IS NOT NULL;
    `});
        
     
    

    //Versioning Notes:
    //1. The below SCD Type-1 versioning technique does a UPSERT of all the records whenever an UPDATE
    //UPSERT the records in the TARGET table  - SILVER Layer   
    snowflake.execute({sqlText:`
    MERGE INTO
        ${DATABASE}.RAWHIST_DB.CUSTOMER_RAWHIST TGT
    USING
        ${DATABASE}.RAWHIST_DB.WORK_CUSTOMER_TRANSFORM XFM 
    ON
        TGT.FIRST_NAME = XFM.FIRST_NAME
    AND
        TGT.LAST_NAME = XFM.LAST_NAME
    AND
        TGT.MD5_HASH = XFM.MD5_HASH
        
    WHEN MATCHED THEN 
        UPDATE SET
            TGT.FIRST_NAME = XFM.FIRST_NAME  
            TGT.LAST_NAME = XFM.LAST_NAME
            TGT.COMPANYNAME = XFM.COMPANYNAME,   
            TGT.PHONE = XFM.PHONE,    
            TGT.ADDRESSLINE1 = XFM.ADDRESSLINE1,    
            TGT.ADDRESSLINE2 = XFM.ADDRESSLINE2,  
            TGT.CITY = XFM.CITY,  
            TGT.STATE = XFM.STATE, 
            TGT.COUNTRY = XFM.COUNTRY,  
            TGT.POSTALCODE = XFM.POSTALCODE, 
            TGT.PROVINCE = XFM.PROVINCE, 
            TGT.TIME_ZONE = XFM.TIME_ZONE, 
            TGT.SOURCE_SYS_NAME = XFM.SOURCE_SYS_NAME,   
            TGT.INSTNC_ST_NM = XFM.INSTNC_ST_NM, 
            TGT.PROCESS_ID = XFM.PROCESS_ID,   
            TGT.PROCESS_NAME = XFM.PROCESS_NAME,  
            TGT.UPDATE_DTS = XFM.UPDATE_DTS, 
            TGT.MD5_HASH = XFM.MD5_HASH
            
    WHEN NOT MATCHED THEN
        INSERT (
            FIRST_NAME,
            LAST_NAME, 
            COMPANYNAME,  
            PHONE,
            ADDRESSLINE1,
            ADDRESSLINE2, 
            CITY,
            STATE,
            COUNTRY,
            POSTALCODE,
            PROVINCE,
            TIME_ZONE, 
            SOURCE_SYS_NAME,
            INSTNC_ST_NM, 
            PROCESS_ID,
            PROCESS_NAME,
            INSERT_DTS,
            UPDATE_DTS, 
            MD5_HASH
        )
    
    VALUES (
        XFM.FIRST_NAME,
        XFM.LAST_NAME,  
        XFM.COMPANYNAME,
        XFM.PHONE,
        XFM.ADDRESSLINE1, 
        XFM.ADDRESSLINE2, 
        XFM.CITY,
        XFM.STATE, 
        XFM.COUNTRY,
        XFM.POSTALCODE,
        XFM.PROVINCE, 
        XFM.TIME_ZONE, 
        XFM.SOURCE_SYS_NAME, 
        XFM.INSTNC_ST_NM,
        XFM.PROCESS_ID, 
        XFM.PROCESS_NAME, 
        XFM.INSERT_DTS,
        XFM.UPDATE_DTS, 
        XFM.MD5_HASH 
        );
     
    //Create statement COMMIT, Commits an open transaction in the current session
    snowflake.execute({sqlText:`COMMIT;`});
    
    //Statement returned for info and debuging purposes
    return "Store Procedure Executed Successfully"; 
    }
    
    catch (err) 
    { 
    result = 'Error: ' + err;
    snowflake.execute({sqlText:`ROLLBACK;`});
    throw result;
    }
    
    $$;



CREATE OR REPLACE TASK SNOWFLAKE_DB.RAWHIST_DB.WORK_RAWHIST_CUSTOMER_SRC_TO_RH_TASK
    WAREHOUSE = COMPUTE_WH
    COMMENT = 'This task is used to load data from copy table to REDEMPTION rawhist table'
    SCHEDULE = 'USING CRON 0 0 * * * America/New_York'
    ERROR_INTEGRATION = SNOWFLAKE_ERROR_INTEGRATION
    WHEN SYSTEM$STREAM_HAS_DATA('SNOWFLAKE_DB.RAWHIST_DB.WORK_RAWHIST_CUSTOMER_SRC_TO_RH_STREAM')
    AS CALL SNOWFLAKE_DB.RAWHIST_DB.WORK_CUSTOMER_SRC_TO_SL_SP('SNOWFLAKE_DB');

    
ALTER TASK SNOWFLAKE_DB.RAWHIST_DB.WORK_RAWHIST_CUSTOMER_SRC_TO_RH_TASK RESUME;

EXECUTE TASK SNOWFLAKE_DB.RAWHIST_DB.WORK_RAWHIST_CUSTOMER_SRC_TO_RH_TASK;


CREATE VIEW 
    SNOWFLAKE_DB.RAWHIST_DB.CUSTOMER_VIEW
AS
SELECT
    FIRST_NAME,
    LAST_NAME,
    COMPANYNAME,
    PHONE,
    ADDRESSLINE1,
    ADDRESSLINE2,
    CITY
    STATE,
    COUNTRY,
    POSTALCODE,
    PROVINCE,
    TIME_ZONE,
    SOURCE_SYS_NAME,
    INSTNC_ST_NM,
    PROCESS_ID,
    PROCESS_NAME,
    INSERT_DTS,
    UPDATE_DTS,
    MD5_HASH
FROM
    SNOWFLAKE_DB.RAWHIST_DB.CUSTOMER
;